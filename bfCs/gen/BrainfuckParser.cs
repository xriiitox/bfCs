//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/joshb/Documents/ProgrammingShit/bfCs/bfCs/Brainfuck.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class BrainfuckParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		GT=1, LT=2, PLUS=3, MINUS=4, DOT=5, COMMA=6, LPAREN=7, RPAREN=8, WS=9;
	public const int
		RULE_file_ = 0, RULE_statement = 1, RULE_opcode = 2;
	public static readonly string[] ruleNames = {
		"file_", "statement", "opcode"
	};

	private static readonly string[] _LiteralNames = {
		null, "'>'", "'<'", "'+'", "'-'", "'.'", "','", "'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "GT", "LT", "PLUS", "MINUS", "DOT", "COMMA", "LPAREN", "RPAREN", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Brainfuck.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static BrainfuckParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public BrainfuckParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public BrainfuckParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class File_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(BrainfuckParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public File_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBrainfuckListener typedListener = listener as IBrainfuckListener;
			if (typedListener != null) typedListener.EnterFile_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBrainfuckListener typedListener = listener as IBrainfuckListener;
			if (typedListener != null) typedListener.ExitFile_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBrainfuckVisitor<TResult> typedVisitor = visitor as IBrainfuckVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public File_Context file_() {
		File_Context _localctx = new File_Context(Context, State);
		EnterRule(_localctx, 0, RULE_file_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 254L) != 0)) {
				{
				{
				State = 6;
				statement();
				}
				}
				State = 11;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 12;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OpcodeContext opcode() {
			return GetRuleContext<OpcodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BrainfuckParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BrainfuckParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBrainfuckListener typedListener = listener as IBrainfuckListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBrainfuckListener typedListener = listener as IBrainfuckListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBrainfuckVisitor<TResult> typedVisitor = visitor as IBrainfuckVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		int _la;
		try {
			State = 23;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GT:
			case LT:
			case PLUS:
			case MINUS:
			case DOT:
			case COMMA:
				EnterOuterAlt(_localctx, 1);
				{
				State = 14;
				opcode();
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 15;
				Match(LPAREN);
				State = 19;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 254L) != 0)) {
					{
					{
					State = 16;
					statement();
					}
					}
					State = 21;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 22;
				Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpcodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(BrainfuckParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(BrainfuckParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(BrainfuckParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(BrainfuckParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(BrainfuckParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(BrainfuckParser.COMMA, 0); }
		public OpcodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opcode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBrainfuckListener typedListener = listener as IBrainfuckListener;
			if (typedListener != null) typedListener.EnterOpcode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBrainfuckListener typedListener = listener as IBrainfuckListener;
			if (typedListener != null) typedListener.ExitOpcode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBrainfuckVisitor<TResult> typedVisitor = visitor as IBrainfuckVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpcode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpcodeContext opcode() {
		OpcodeContext _localctx = new OpcodeContext(Context, State);
		EnterRule(_localctx, 4, RULE_opcode);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 25;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 126L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,9,28,2,0,7,0,2,1,7,1,2,2,7,2,1,0,5,0,8,8,0,10,0,12,0,11,9,0,1,0,1,
		0,1,1,1,1,1,1,5,1,18,8,1,10,1,12,1,21,9,1,1,1,3,1,24,8,1,1,2,1,2,1,2,0,
		0,3,0,2,4,0,1,1,0,1,6,27,0,9,1,0,0,0,2,23,1,0,0,0,4,25,1,0,0,0,6,8,3,2,
		1,0,7,6,1,0,0,0,8,11,1,0,0,0,9,7,1,0,0,0,9,10,1,0,0,0,10,12,1,0,0,0,11,
		9,1,0,0,0,12,13,5,0,0,1,13,1,1,0,0,0,14,24,3,4,2,0,15,19,5,7,0,0,16,18,
		3,2,1,0,17,16,1,0,0,0,18,21,1,0,0,0,19,17,1,0,0,0,19,20,1,0,0,0,20,22,
		1,0,0,0,21,19,1,0,0,0,22,24,5,8,0,0,23,14,1,0,0,0,23,15,1,0,0,0,24,3,1,
		0,0,0,25,26,7,0,0,0,26,5,1,0,0,0,3,9,19,23
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
